// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
package plugin

// #include "plugin.h"
// #include <stdlib.h>
import "C"
import "unsafe"
// Import functions from atlascli:plugin/host@0.0.1
func AtlascliPlugin0_0_1_HostBearerToken() string {
  var ret C.plugin_string_t
  C.atlascli_plugin_host_bearer_token(&ret )
  var lift_ret string
  lift_ret = C.GoStringN((*C.char)(unsafe.Pointer(ret.ptr)), C.int(ret.len))
  return lift_ret
}

// Export functions from atlascli:plugin/info@0.0.1
var exports_atlascli_plugin0_0_1_info ExportsAtlascliPlugin0_0_1_Info = nil
// `SetExportsAtlascliPlugin0_0_1_Info` sets the `ExportsAtlascliPlugin0_0_1_Info` interface implementation.
// This function will need to be called by the init() function from the guest application.
// It is expected to pass a guest implementation of the `ExportsAtlascliPlugin0_0_1_Info` interface.
func SetExportsAtlascliPlugin0_0_1_Info(i ExportsAtlascliPlugin0_0_1_Info) {
  exports_atlascli_plugin0_0_1_info = i
}
type ExportsAtlascliPlugin0_0_1_Info interface {
  Name() string 
  SubCommands() []string 
  Run() Result[struct{}, string] 
}
//export exports_atlascli_plugin_info_name
func exportsAtlascliPlugin001InfoName(ret *C.plugin_string_t) {
  result := exports_atlascli_plugin0_0_1_info.Name()
  var lower_result C.plugin_string_t

  // use unsafe.Pointer to avoid copy
  lower_result.ptr = (*uint8)(unsafe.Pointer(C.CString(result)))
  lower_result.len = C.size_t(len(result))
  *ret = lower_result

}
//export exports_atlascli_plugin_info_sub_commands
func exportsAtlascliPlugin001InfoSubCommands(ret *C.plugin_list_string_t) {
  result := exports_atlascli_plugin0_0_1_info.SubCommands()
  var lower_result C.plugin_list_string_t
  if len(result) == 0 {
    lower_result.ptr = nil
    lower_result.len = 0
  } else {
    var empty_lower_result C.plugin_string_t
    lower_result.ptr = (*C.plugin_string_t)(C.malloc(C.size_t(len(result)) * C.size_t(unsafe.Sizeof(empty_lower_result))))
    lower_result.len = C.size_t(len(result))
    for lower_result_i := range result {
      lower_result_ptr := (*C.plugin_string_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_result.ptr)) +
      uintptr(lower_result_i)*unsafe.Sizeof(empty_lower_result)))
      var lower_result_ptr_value C.plugin_string_t

      // use unsafe.Pointer to avoid copy
      lower_result_ptr_value.ptr = (*uint8)(unsafe.Pointer(C.CString(result[lower_result_i])))
      lower_result_ptr_value.len = C.size_t(len(result[lower_result_i]))
      *lower_result_ptr = lower_result_ptr_value
    }
  }
  *ret = lower_result

}
//export exports_atlascli_plugin_info_run
func exportsAtlascliPlugin001InfoRun(ret *C.exports_atlascli_plugin_info_result_void_string_t) {
  result := exports_atlascli_plugin0_0_1_info.Run()
  var lower_result C.exports_atlascli_plugin_info_result_void_string_t
  lower_result.is_err = result.IsErr()
  if result.IsOk() {
  } else {
    lower_result_ptr := (*C.plugin_string_t)(unsafe.Pointer(&lower_result.val))
    var lower_result_val C.plugin_string_t

    // use unsafe.Pointer to avoid copy
    lower_result_val.ptr = (*uint8)(unsafe.Pointer(C.CString(result.UnwrapErr())))
    lower_result_val.len = C.size_t(len(result.UnwrapErr()))
    *lower_result_ptr = lower_result_val
  }
  *ret = lower_result

}
